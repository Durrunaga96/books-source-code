//********************************************************************//  ArrayList.java       Authors: Lewis/Chase//                       Mods   : JCD//  Represents an array implementation of a list. The front of//  the list is kept at array index 0. This class will be extended//  to create a specific kind of list.//********************************************************************package jss2;import jss2.exceptions.*;import java.util.Iterator;public class ArrayList implements ListADT{   private final int DEFAULT_CAPACITY = 100;   private final int NOT_FOUND = -1;   protected int rear;   protected Object[] list;    //-----------------------------------------------------------------   //  Creates an empty list using the default capacity.   //-----------------------------------------------------------------   public ArrayList()   {      rear = 0;      list = new Object[DEFAULT_CAPACITY];   }   //-----------------------------------------------------------------   //  Creates an empty list using the specified capacity.   //-----------------------------------------------------------------   public ArrayList (int initialCapacity)   {      rear = 0;      list = new Object[initialCapacity];   }   //-----------------------------------------------------------------   //  Removes and returns the last element in the list.   //-----------------------------------------------------------------   public Object removeLast () throws EmptyCollectionException   {   }   //-----------------------------------------------------------------   //  Removes and returns the first element in the list.   //-----------------------------------------------------------------   public Object removeFirst() throws EmptyCollectionException   {   }   //-----------------------------------------------------------------   //  Removes and returns the specified element.   //-----------------------------------------------------------------   public Object remove (Object element)   {      Object result;      int index = find (element);      if (index == NOT_FOUND)         throw new ElementNotFoundException ("list");      result = list[index];      rear--;      // shift the appropriate elements      for (int scan=index; scan < rear; scan++)         list[scan] = list[scan+1];       list[rear] = null;      return result;   }      //-----------------------------------------------------------------   //  Returns a reference to the element at the front of the list.   //  The element is not removed from the list.  Throws an   //  EmptyCollectionException if the list is empty.     //-----------------------------------------------------------------   public Object first() throws EmptyCollectionException   {   }   //-----------------------------------------------------------------   //  Returns a reference to the element at the rear of the list.   //  The element is not removed from the list.  Throws an   //  EmptyCollectionException if the list is empty.     //-----------------------------------------------------------------   public Object last() throws EmptyCollectionException   {   }   //-----------------------------------------------------------------   //  Returns true if this list contains the specified element.   //-----------------------------------------------------------------   public boolean contains (Object target)   {      return (find(target) != NOT_FOUND);   }   //-----------------------------------------------------------------   //  Returns the array index of the specified element, or the   //  constant NOT_FOUND if it is not found.   //-----------------------------------------------------------------   private int find (Object target)   {      int scan = 0, result = NOT_FOUND;      boolean found = false;      if (! isEmpty())         while (! found && scan < rear)            if (target.equals(list[scan]))               found = true;            else               scan++;      if (found)         result = scan;      return result;   }   //-----------------------------------------------------------------   //  Returns true if this list is empty and false otherwise.    //-----------------------------------------------------------------   public boolean isEmpty()   {   }    //-----------------------------------------------------------------   //  Returns the number of elements currently in this list.   //-----------------------------------------------------------------   public int size()   {   }   //-----------------------------------------------------------------   //  Returns an iterator for the elements currently in this list.   //-----------------------------------------------------------------   public Iterator iterator()   {   }   //-----------------------------------------------------------------   //  Returns a string representation of this list.    //-----------------------------------------------------------------   public String toString()   {   }   //-----------------------------------------------------------------   //  Creates a new array to store the contents of the list with   //  twice the capacity of the old one.   //-----------------------------------------------------------------   protected void expandCapacity()   {   }}